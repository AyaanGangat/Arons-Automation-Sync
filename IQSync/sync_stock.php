<?php
// --- Error Reporting & Script Start ---
error_reporting(E_ALL);
ini_set('display_errors', 1);
echo "Starting stock sync script (HTTPS Mode)...\n";

// 🔐 WooCommerce API credentials
$consumer_key = 'ck_5f011719d7cace15bd307f1bfd0243faedd31ebc';
$consumer_secret = 'cs_86473b1406a2cbf0e3efccfd5babebed0b55be0c';
$site_url = 'https://arons-test-site.local/wp-json/wc/v3/products';

// 📂 Path to the IQ CSV export
$iq_csv_path = 'C:\IQSync\stock.csv'; // From IQ Retail

// 📂 Path to the WooCommerce snapshot CSV generated by the WordPress plugin
$woo_snapshot_csv_path = 'C:\Users\ayaan\Local Sites\arons-test-site\app\public\wp-content\woo_snapshots\woocommerce_full_snapshot.csv';

// --- Load IQ Stock Data ---
if (!file_exists($iq_csv_path)) {
    die("❌ IQ CSV file not found at $iq_csv_path\n");
}
echo "✅ IQ CSV file found at $iq_csv_path\n";

$iq_csv_handle = fopen($iq_csv_path, 'r');
if ($iq_csv_handle === false) {
    die("❌ Could not open IQ CSV file.\n");
}
$iq_header = fgetcsv($iq_csv_handle, 0, ",", '"', "\\");
if ($iq_header === false) {
    fclose($iq_csv_handle);
    die("❌ Could not read header from IQ CSV file or file is empty.\n");
}
$iq_stock_data = [];
while (($row = fgetcsv($iq_csv_handle, 0, ",", '"', "\\")) !== false) {
    if (count($iq_header) === count($row)) {
        $data = @array_combine($iq_header, $row);
        if ($data && isset($data['CODE']) && isset($data['ONHAND'])) {
            $sku = trim(preg_replace('/[^A-Za-z0-9_\-\/]/', '', $data['CODE']));
            if (!empty($sku)) {
                $iq_stock_data[$sku] = intval($data['ONHAND']);
            }
        } else {
            // echo "⚠️ Skipping row in IQ CSV due to missing CODE or ONHAND, or column mismatch.\n";
        }
    } else {
        // echo "⚠️ Skipping row in IQ CSV due to column count mismatch with header.\n";
    }
}
fclose($iq_csv_handle);
echo "✅ Loaded " . count($iq_stock_data) . " products from IQ CSV.\n";

// --- Load WooCommerce Snapshot Data ---
if (!file_exists($woo_snapshot_csv_path)) {
    die("❌ WooCommerce snapshot CSV file not found at $woo_snapshot_csv_path. Run the WordPress snapshot export first.\n");
}
echo "✅ WooCommerce snapshot CSV file found at $woo_snapshot_csv_path\n";

$woo_csv_handle = fopen($woo_snapshot_csv_path, 'r');
if ($woo_csv_handle === false) {
    die("❌ Could not open WooCommerce snapshot CSV file.\n");
}
$woo_header = fgetcsv($woo_csv_handle, 0, ",", '"', "\\");
if ($woo_header === false) {
    fclose($woo_csv_handle);
    die("❌ Could not read header from WooCommerce snapshot CSV or file is empty.\n");
}
$woo_stock_snapshot = [];
$sku_col_index = array_search('SKU', $woo_header);
$stock_col_index = array_search('StockQuantity', $woo_header); // Assuming this is the column name in your snapshot

if ($sku_col_index === false || $stock_col_index === false) {
    fclose($woo_csv_handle);
    die("❌ 'SKU' or 'StockQuantity' column not found in WooCommerce snapshot CSV header. Check snapshot export settings.\nHeader was: " . implode(', ', $woo_header) . "\n");
}

while (($row = fgetcsv($woo_csv_handle, 0, ",", '"', "\\")) !== false) {
    if (isset($row[$sku_col_index]) && isset($row[$stock_col_index])) {
        $sku = trim(preg_replace('/[^A-Za-z0-9_\-\/]/', '', $row[$sku_col_index]));
        if (!empty($sku)) {
            $stock_value_raw = trim($row[$stock_col_index]);
            if ($stock_value_raw === '' || !is_numeric($stock_value_raw)) {
                $woo_stock_snapshot[$sku] = null;
            } else {
                $woo_stock_snapshot[$sku] = intval($stock_value_raw);
            }
        }
    }
}
fclose($woo_csv_handle);
echo "✅ Loaded " . count($woo_stock_snapshot) . " products from WooCommerce snapshot.\n";


// --- Compare and Find Differences ---
$products_to_update_api = [];
foreach ($iq_stock_data as $sku => $iq_onhand) {
    if (array_key_exists($sku, $woo_stock_snapshot)) {
        $woo_current_stock = $woo_stock_snapshot[$sku];
        if ($woo_current_stock === null || $iq_onhand !== $woo_current_stock) {
            // echo "SKU $sku stock changed. IQ: $iq_onhand, Woo Snapshot: " . ($woo_current_stock === null ? 'Not Set/Managed' : $woo_current_stock) . ". Queuing for API update.\n";
            $products_to_update_api[$sku] = $iq_onhand;
        }
    } else {
        // echo "SKU $sku found in IQ export but not in Woo snapshot. Skipping (not creating new products via this script).\n";
    }
}

// --- Make Targeted API Calls for Changed Products ---
if (!empty($products_to_update_api)) {
    echo "Found " . count($products_to_update_api) . " products to update via API.\n";
    foreach ($products_to_update_api as $sku_to_update => $new_stock_level) {
        echo "--------------------------------------------------\n";
        echo "Processing API update for SKU: $sku_to_update, New Stock: $new_stock_level\n";

        $get_url = $site_url . "?sku=" . urlencode($sku_to_update);
        echo "🌐 Requesting (GET): $get_url\n";
        $ch_get = curl_init($get_url);
        curl_setopt($ch_get, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch_get, CURLOPT_USERPWD, "$consumer_key:$consumer_secret");
        curl_setopt($ch_get, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
        curl_setopt($ch_get, CURLOPT_SSL_VERIFYPEER, false); // For local self-signed HTTPS
        curl_setopt($ch_get, CURLOPT_SSL_VERIFYHOST, false); // For local self-signed HTTPS
        $response_get = curl_exec($ch_get);
        $http_code_get = curl_getinfo($ch_get, CURLINFO_HTTP_CODE);
        $curl_error_get = curl_error($ch_get);
        curl_close($ch_get);

        echo "🧾 API Response (GET) HTTP Code: $http_code_get | cURL Error: $curl_error_get | Body: $response_get\n";

        if ($response_get !== false && $http_code_get == 200) {
            $products = json_decode($response_get, true);
            if (!empty($products) && isset($products[0]['id'])) {
                $product_id = $products[0]['id'];
                echo "Found product ID: $product_id for SKU: $sku_to_update.\n";

                $update_data = [
                    'stock_quantity' => $new_stock_level,
                    'manage_stock' => true
                ];
                $put_url = $site_url . "/" . $product_id;
                echo "🌐 Requesting (PUT): $put_url with data: " . json_encode($update_data) . "\n";

                $ch_put = curl_init($put_url);
                curl_setopt($ch_put, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch_put, CURLOPT_CUSTOMREQUEST, "PUT");
                curl_setopt($ch_put, CURLOPT_POSTFIELDS, json_encode($update_data));
                curl_setopt($ch_put, CURLOPT_USERPWD, "$consumer_key:$consumer_secret");
                curl_setopt($ch_put, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
                curl_setopt($ch_put, CURLOPT_SSL_VERIFYPEER, false); // For local self-signed HTTPS
                curl_setopt($ch_put, CURLOPT_SSL_VERIFYHOST, false); // For local self-signed HTTPS
                $result_put = curl_exec($ch_put);
                $http_code_put = curl_getinfo($ch_put, CURLINFO_HTTP_CODE);
                $curl_error_put = curl_error($ch_put);
                curl_close($ch_put);

                echo "🧾 API Response (PUT) HTTP Code: $http_code_put | cURL Error: $curl_error_put | Body: $result_put\n";
                if ($result_put !== false && $http_code_put >= 200 && $http_code_put < 300) {
                    echo "✅ Successfully updated stock for SKU $sku_to_update to $new_stock_level.\n";
                } else {
                    echo "❌ Failed to update stock for SKU $sku_to_update. HTTP Code: $http_code_put. Error: $curl_error_put. Response: $result_put\n";
                }
            } else {
                echo "⚠️ Product ID not found in API response for SKU $sku_to_update, even though GET was successful. Response: $response_get\n";
                 if (is_array($products) && empty($products)) {
                    echo "(API returned an empty array for SKU '$sku_to_update', meaning no product matched this SKU in WooCommerce for the GET request)\n";
                }
            }
        } else {
            echo "❌ Error fetching product ID for SKU $sku_to_update. HTTP Code: $http_code_get. Error: $curl_error_get\n";
        }
    }
} else {
    echo "No stock changes detected between IQ export and WooCommerce snapshot that require API updates.\n";
}

echo "🔚 Sync script finished.\n";
?>
